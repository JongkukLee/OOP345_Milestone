#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include "i.h"
#include "o.h"
#include "t.h"
#include "util.h"
#include "machine.h"
#define VERBOSE 1

using namespace std;

class Factory {

  vector<Machine> machineList;
public:
  Factory()
  {


  }
  Factory(ItemManager& im, OrderManager& om, TaskManager& tm)
  {
    // STEP1. Create the factory
    // crete a machine from each task

    for (size_t m = 0; m < tm.count(); m++)
    {
      machineList.push_back(Machine(tm.task(m)));
    }
    for (auto& m : machineList)
      cout << "name:  '" << m.name() << "'";

    cout << "\n";


    // 2. find source code
    auto findMachine = [&](string name) -> Machine* {

      for (size_t m = 0; m < machineList.size(); m++)
      {

        if (machineList[m].name() == name)
        {
          return &machineList[m];
        }
      }
      return nullptr;
    };



    for (auto& m : machineList)
    {
      string  pass = m.pass();
      if (!pass.empty())
      {
        findMachine(pass)->incIncomming();
      }
      string fail = m.fail();
      if (!fail.empty())
      {
        findMachine(fail)->incIncomming();

      }
    }

    for (auto& m : machineList) {
      cout << "'" << m.name() << "'";
      if (m.isSink()) cout << " is a SINK";
      if (m.isSource()) cout << " is a SOURCE";
      cout << "\n";
    }
    int sourceNode = -1;
    for (size_t m = 0; m < machineList.size(); m++)
    {
      if (machineList[m].isSource() && machineList[m].isSink())
        continue; // ignore singletone nodes
      if (machineList[m].isSource())
      {
        if (sourceNode == -1)
        {
          sourceNode = m;
          break; // JJ
        }
        else
        {
          throw string("Multi source nodes, node ")
            + to_string(sourceNode) + " and "
            + to_string(m) +
            +"FIX DATA AND RESOURCE!!!";
        }
      }

    }
    cout << "sourceNode is " << sourceNode << "\n";
    if (sourceNode == -1)
      throw string("No source node FIX TASK AND RESUBMIT!!!");

    // STEP3. Add jobs to sourceNode machine's job queue
    for (size_t o = 0; o < om.count(); o++)

    {
      machineList[sourceNode].addJob(std::move(Job(om.order(o))));
      if (VERBOSE) cout << "JJ input order ::::::::::::::::::::::::::::::::\n";

    }

    for (auto& m : machineList) {
      cout << m.name();
      if (m.jobSize())
        cout << " has " << m.jobSize() << " jobs in its jobQ";
      cout << "\n";
    }

    // classify all machie
    /*
    for (auto& m : machineList) {
    m.Classify(im);
    }
    */

    // Step4. time loop
    int time = 0;
    Job job;
    while (true) { // time loop //////////////////////////////////////////////////////////////////
      if (VERBOSE) cout << "JJtime loop Start::::::::::::::::::::::::::::::::\n";

      bool bAllDone = true;
      for (auto& m : machineList) {
        if (VERBOSE) cout << "JJtime loop::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
        if (m.jobSize())
        {
          bAllDone = false;
          break;
        }
      }
      if (bAllDone) {
        cout << "All done, exiting time loop\n";
        break; // exit time loop
      }


      //////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////

      for (auto& m : machineList) { // machine loop //////////////////////////////////////////////////////
        if (VERBOSE) cout << "JJTest::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";

        // if jobQ is empty for this machine, nothing to do
#if 0
        if (m.jobSize() == 0)
        {
          break;
          //continue; // nothing for this machine to do //JJ

        }
#endif
        //JJ

        if (m.isSource()) {
          job = m.getJob();
          if (VERBOSE) cout << "JJSource::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";

        }
        //if (VERBOSE) cout << "JJTest2::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
        //if (VERBOSE) cout << "JJ::::: customer()1: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

        cout << "job" << job.customer() << "/" << job.product() << " is set machine " << m.name() << "\n";


        // JJ: add job to machine
        if (m.isSink()) {

          if (VERBOSE) cout << "JJSink::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
#if 0
          // if job not complete, move it to the source node
          if (job.jobComplete())
          {
            cout << "job" << job.customer() << "/" << job.product() << " terminated machine " << m.name() << "\n";
          }
          else { // send it 
            cout << "job" << job.customer() << "/" << job.product() << " terminated machine " << m.name() << "\n";
            cout << "job is  not complete. re-routing back to source node" << sourceNode << "\n";

            machineList[sourceNode].addJob(move(job));
          }
#endif
          //continue; //JJ
          break;
        }
        if (VERBOSE) cout << "JJTest1::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
        //if (VERBOSE) cout << "JJ::::: customer()2: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";


        // classify all machie

        //for (auto& m : machineList) {
        m.Classify(im);
        //}

        //if (VERBOSE) cout << "JJTest3::::: m.getInstaller(): " << m.getInstaller() << ", m.getRemover(): " << m.getRemover() << "::::::::::::::::\n";

        if (VERBOSE) cout << "JJTest2::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
        //if (VERBOSE) cout << "JJ::::: customer()3: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

        bool bDidSomething = false;
        // are we an installer?
        //if (VERBOSE) cout << "JJ::::: customer()4: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";
        if (m.getInstaller()) {
          for (size_t i = 0; i < job.count(); i++) {
            //if (job.getInstalled(i))
            //	continue; // 
            string itemName = job.item(i); // say, 'I7'
            string installer = im.find(itemName)->installer(); // say, 'INSTALL CPU'

            if (VERBOSE) cout << "JJTest2-1::::: m.name: " << m.name() << ", installer: " << installer << "::::::::::::::::\n";

            if (m.name() == installer) {

              // install the item
              job.setInstalled(i, true);
              time++;
              bDidSomething = true;
              break;
            }
          }
        }
        //if (VERBOSE) cout << "JJ::::: customer()5: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

        // are we a remover?
        if (m.getRemover()) {
          for (int i = job.count(); i >= 0; i--) { // remove the last 'I7', not the first 'I7'
                                                   //if (!job.getInstalled(i))
                                                   //	continue; // 
            string itemName = job.item(i); // say, 'I7'

            string remover = im.find(itemName)->remover(); // say, 'REMOVE CPU'

            if (VERBOSE) cout << "JJTest2-1::::: m.name: " << m.name() << ", installer: " << remover << "::::::::::::::::\n";


            if (m.name() == remover) {

              // remove the item
              job.setInstalled(i, true);
              time++;
              bDidSomething = true;
              break;
            }


          }
        }

        if (VERBOSE) cout << "JJbDidSomething::::: m.name: " << m.name() << ", bDidSomething: " << bDidSomething << "::::::::::::::::\n";
        //if (VERBOSE) cout << "JJ::::: customer()6: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";



        auto movePass = [&] {
          string pass = m.pass();
          for (auto & m2 : machineList) { // machine loop
            if (m2.name() == pass) {

              //m2.addJob(move(job));
              //m2.addJobQ(std::move(m.getJobQ()));
              m.setName(m2.name());
              //m = std::move(m2);
              break;
            }

          }
        };

        //if (VERBOSE) cout << "JJ::::: customer()7: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";


        auto moveFail = [&] {
          string fail = m.fail();
          for (auto & m2 : machineList) { // machine loop
            if (m2.name() == fail) {

              //m2.addJob(move(job));
              //m2.addJobQ(std::move(m.getJobQ()));
              //m = std::move(m2);
              m.setName(m2.name());
              break;
            }

          }
        };
        //if (VERBOSE) cout << "JJ::::: customer()8: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

        if (VERBOSE) cout << "JJTest3::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";


        if (!bDidSomething) {
          if (VERBOSE) cout << "JJTest3-1::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
          //if (VERBOSE) cout << "JJ::::: customer()9: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";
          movePass(); // move 'job' to pass
          if (VERBOSE) cout << "JJTest3-2::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
          //if (VERBOSE) cout << "JJ::::: customer()10: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";
          //if (VERBOSE) cout << "JJTest4::::: m.name(): " << m.name() << "m.getInstaller(): " << m.getInstaller() << ", m.getRemover(): " << m.getRemover() << "::::::::::::::::\n";
          continue; // next machine in machine loop

          if (VERBOSE) cout << "JJTest3-3::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";

        }
        //if (VERBOSE) cout << "JJ::::: customer()11: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";
#if 0
        if (VERBOSE) cout << "JJTest4::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";

        if (m.fail().empty()) {
          if (VERBOSE) cout << "JJTest4-1::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
          //if (VERBOSE) cout << "JJ::::: customer()12: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

          movePass(); // move 'job' to pass
          continue; // nextmachine in machine loop

          if (VERBOSE) cout << "JJTest4-2::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
          //if (VERBOSE) cout << "JJ::::: customer()913: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

          if (rand() & 1) { // add passed (1), even failed (0) 
            movePass(); // move 'job' to pass
            if (VERBOSE) cout << "JJTest4-3::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
            //if (VERBOSE) cout << "JJ::::: customer()14: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

          }
          else {
            moveFail(); // move 'job' to fail
            if (VERBOSE) cout << "JJTest4-4::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
            if (VERBOSE) cout << "JJ::::: customer()15: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";

          }
        }
        if (VERBOSE) cout << "JJTest5::::: m.name: " << m.name() << ", Job size: " << m.jobSize() << "::::::::::::::::\n";
        //if (VERBOSE) cout << "JJ::::: customer()16: " << job.customer() << ", job.count(): " << job.count() << "::::::::::::::::\n";
#endif
      } // machine loop
    } // time loop
  }
};
int main(int argc, char* argv[])
{
  // 
  // 
  argc = 5;
  argv[0] = "M1";
  argv[1] = "WorkingItem.dat";
  argv[2] = "WorkingOrder.dat";
  argv[3] = "WorkingTask.dat";
  argv[4] = "|";


  if (argc != 5) {
    cerr << "Usage: " << argv[0] << " csv-file csv-delimiter\n";
    return 1;
  }

  string filenameItem = argv[1];
  string filenameOrder = argv[2];
  string filenameTask = argv[3];
  char   delimiter = argv[4][0];

  try
  {
    vector< vector<string> > csvDataTask;
    vector< vector<string> > csvDataOrder;
    vector< vector<string> > csvDataItem;
    csvRead(filenameTask, delimiter, csvDataTask);
    csvRead(filenameOrder, delimiter, csvDataOrder);
    csvRead(filenameItem, delimiter, csvDataItem);
    //csvPrint(csvDataTask);

    ItemManager im(csvDataItem);
    //im.print();
    //im.graph(filenameItem);

    OrderManager om(csvDataOrder);
    //om.print();
    //om.graph(filenameOrder);


    TaskManager tm(csvDataTask);
    //tm.print();
    //tm.graph(filenameTask);


    if (im.validate(tm) && om.validate(im) && tm.validate())
    {
      cout << "++++++++++++++++++++++++++++++++++++++++++\n";
      cout << "Data has referental integraty. GOOD TO GO.\n";
      cout << "++++++++++++++++++++++++++++++++++++++++++\n";

    }
    else
    {
      cout << "++++++++++++++++++++++++++++++++++++++++++\n";
      cerr << "Data has referental integraty Problem.\n";
      cout << "++++++++++++++++++++++++++++++++++++++++++\n";
      throw string("Data has refeential integrity problem. FIX AND RE-SUBMIT!!!");
    }

    Factory f(im, om, tm);

    //im.validate(tm);
    //om.validate(im);
    //tm.validate();

  }
  catch (const string& e)
  {
    cerr << "It threw! -->" << e << "\n";
    return 2;
  }
}


